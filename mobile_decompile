Android Emulator : Shell Reverse 

C:\Users\Ryan>cd C:\Users\Ryan\AppData\Local\Android\Sdk\platform-tools

C:\Users\Ryan\AppData\Local\Android\Sdk\platform-tools>adb devices
List of devices attached
192.168.56.103:5555     device


C:\Users\Ryan\AppData\Local\Android\Sdk\platform-tools>adb shell settings put global http_proxy localhost:3333

C:\Users\Ryan\AppData\Local\Android\Sdk\platform-tools>adb reverse tcp:3333 tcp:8082


Here’s a complete list of all the commands you used, including the remaining final steps:
1. Set Up the Proxy and Reverse the Port (optional if already done)

bash

adb shell settings put global http_proxy localhost:3333
adb reverse tcp:3333 tcp:8082

2. Convert the Certificate from DER to PEM Format

bash

openssl x509 -inform DER -in "C:\Users\Ryan\Documents\Burp Cert\cacert.der" -out "C:\Users\Ryan\Documents\Burp Cert\cacert.pem"

3. Generate the Hash of the PEM Certificate

bash

openssl x509 -inform PEM -subject_hash_old -in "C:\Users\Ryan\Documents\Burp Cert\cacert.pem" | findstr /R "^.*"

You got the hash 9a5ba575 from this.
4. Rename the PEM File to the Hash

Since the mv command doesn't work on Windows, you used the rename command:

bash

rename "C:\Users\Ryan\Documents\Burp Cert\cacert.pem" "9a5ba575.0"

5. Push the Renamed Certificate to the Emulator

You successfully pushed the certificate to the emulator’s /sdcard/ directory:

bash

adb root
adb remount
adb push "C:\Users\Ryan\Documents\Burp Cert\9a5ba575.0" /sdcard/

6. Move the Certificate to the Trusted Store

Now, move the certificate to the system’s trusted CA store:

bash

adb shell mv /sdcard/9a5ba575.0 /system/etc/security/cacerts/
adb shell chmod 644 /system/etc/security/cacerts/9a5ba575.0

7. Reboot the Emulator

Finally, restart the emulator to ensure the new certificate is picked up:

bash

adb reboot
