import requests
import json

base_url = "https://services.nvd.nist.gov/rest/json/cves/1.0"

def read_api_key():
    with open("api_key.txt", "r") as file:
        return file.read().strip()

def search_vulnerabilities(keyword):
    # Read the API key from the text file
    api_key = read_api_key()

    # Construct the URL for the API request using the provided base URL and keyword
    url = f"{base_url}?keywordSearch={keyword}"

    # Set the headers with the API key
    headers = {"api_key": api_key}

    # Send a GET request to the URL and retrieve the JSON response
    response = requests.get(url, headers=headers)
    data = response.json()

    if "result" in data:
        # Extract the CVE items from the JSON response
        cve_items = data["result"]["CVE_Items"]

        for cve_item in cve_items:
            # Extract relevant information for each CVE item
            cve = cve_item["cve"]
            cve_id = cve["CVE_data_meta"]["ID"]
            description = cve["description"]["description_data"][0]["value"]
            published_date = cve_item["publishedDate"]
            last_modified_date = cve_item["lastModifiedDate"]

            # Additional information from the schema
            cvss_v3 = cve_item["impact"].get("baseMetricV3", {}).get("cvssV3", {})
            cvss_v2 = cve_item["impact"].get("baseMetricV2", {}).get("cvssV2", {})
            severity_v3 = cvss_v3.get("baseSeverity") if cvss_v3 else "None"
            severity_v2 = cvss_v2.get("severity") if cvss_v2 else "None"

            # Extracting additional JSON data
            data_type = cve["data_type"]
            data_format = cve["data_format"]
            data_version = cve["data_version"]
            assigner = cve["CVE_data_meta"]["ASSIGNER"]
            problem_type = cve["problemtype"]["problemtype_data"][0].get("description", [])
            references = cve["references"]["reference_data"]
            description_data = cve["description"]["description_data"][0]

            # Print the CVE information
            print("CVE ID:", cve_id)
            print("Description:", description)
            print("Published Date:", published_date)
            print("Last Modified Date:", last_modified_date)
            print("CVSS Severity (v3):", severity_v3)
            print("CVSS Severity (v2):", severity_v2)

            # Print the additional JSON data
            print("Data Type:", data_type)
            print("Data Format:", data_format)
            print("Data Version:", data_version)
            print("Assigner:", assigner)
            print("Problem Type:", problem_type)
            print("References:")
            for reference in references:
                print("  - URL:", reference["url"])
                print("    Name:", reference["name"])
                print("    Reference Source:", reference["refsource"])
            print("Description Data:")
            print("  - Language:", description_data["lang"])
            print("    Value:", description_data["value"])

            print("-" * 90)

    if "result" not in data or not data["result"]["CVE_Items"]:
        print("No vulnerabilities found.")

if __name__ == "__main__":
    # Prompt the user to enter a keyword for vulnerability search
    keyword = input("Enter a keyword to search for vulnerabilities: ")
    search_vulnerabilities(keyword)
